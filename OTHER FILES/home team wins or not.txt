df['diff_goals']=df['home_team_goal']-df['away_team_goal']

def betting(dl):
    if dl > 0.5: return 1
    elif dl==0: return 2
    else: return 3
df["result"] = df['diff_goals'].map(betting)

new_df=df[['stage','B365H', 'B365D', 'B365A', 'result']]
new_df.head()






start=timer()

X=new_df.iloc[:,0:4]
Y=new_df.iloc[:,4]

scaler = MinMaxScaler()
X=scaler.fit_transform(X)


seed = 7
num_trees = 5
max_features = 4
kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=seed)
model = RandomForestClassifier(n_estimators=num_trees, max_features=max_features)
results = model_selection.cross_val_score(model, X, Y, cv=kfold)
print(results.mean())

end=timer()
print(end-start)





#Grid Search
start = timer()

# define the grid search parameters
n_estimators=[6,7,8,9,10,11,12,13,14,15]
param_grid = dict(n_estimators=n_estimators)

seed=7
num_trees=5

model = RandomForestClassifier(n_estimators=num_trees, max_features=max_features)

grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=1, cv=10)
grid_result = grid.fit(X,Y)

# summarize results
print("Best: %f using %s" % (grid_result.best_score_, grid_result.best_params_))
means = grid_result.cv_results_['mean_test_score']
stds = grid_result.cv_results_['std_test_score']
params = grid_result.cv_results_['params']
for mean, stdev, param in zip(means, stds, params):
    print("%f (%f) with: %r" % (mean, stdev, param))
    
end = timer()
print(end - start)